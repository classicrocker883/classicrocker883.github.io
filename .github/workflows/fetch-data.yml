name: Fetch Firmware Release Data

on:
  schedule:
    - cron: '22 12  1 * *'
    - cron: '22 12  8 * *'
    - cron: '22 12 18 * *'
    - cron: '22 12 28 * *'

  workflow_dispatch:

permissions:
  contents: write

jobs:
  fetch_data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '20'

      - name: Fetch and save releases data
        run: |
          mkdir -p assets/data

          node -e '
            const fs = require("fs");
            const https = require("https");

            async function fetchPage(url) {
                return new Promise((resolve, reject) => {
                    https.get(url, {
                        headers: {
                            "User-Agent": "classicrocker883-firmware-selector"
                        }
                    }, (res) => {
                        let data = "";
                        res.on("data", (chunk) => { data += chunk; });
                        res.on("end", () => {
                            if (res.statusCode >= 200 && res.statusCode < 300) {
                                try {
                                    resolve(JSON.parse(data));
                                } catch (e) {
                                    reject(new Error(`Failed to parse JSON from ${url}: ${e.message}`));
                                }
                            } else {
                                reject(new Error(`Failed to fetch ${url}, Status: ${res.statusCode}, Message: ${data}`));
                            }
                        });
                    }).on("error", (err) => {
                        reject(err);
                    });
                });
            }

            async function fetchAllReleases(url, page = 1, releases = [], sinceDate = null) {
                let currentPageUrl = `${url}?page=${page}&per_page=100`;
                console.log(`Fetching page ${page} from: ${currentPageUrl}`);
                const data = await fetchPage(currentPageUrl);

                if (data.length === 0) {
                    return releases;
                }

                const newReleases = [];
                let reachedOlderReleases = false;

                for (const release of data) {
                    if (sinceDate && new Date(release.published_at) <= sinceDate) {
                        reachedOlderReleases = true;
                        break;
                    }
                    newReleases.push(release);
                }

                const allReleases = releases.concat(newReleases);

                if (reachedOlderReleases || data.length < 100) {
                  return allReleases;
                } else {
                  return fetchAllReleases(url, page + 1, allReleases, sinceDate);
                }
            }

            async function main() {
              const repoApiUrl = "https://api.github.com/repos/classicrocker883/MRiscoCProUI/releases";
              const filePath = "assets/data/releases.json";
              let existingReleases = [];
              let lastFetchDate = null;

              if (fs.existsSync(filePath)) {
                  try {
                      const fileContent = fs.readFileSync(filePath, "utf8");
                      if(fileContent) {
                        existingReleases = JSON.parse(fileContent);
                        console.log(`Loaded ${existingReleases.length} existing releases from ${filePath}.`);
                      }
                      if (existingReleases.length > 0) {
                          lastFetchDate = new Date(existingReleases[0].published_at);
                          console.log(`Will only fetch releases published after: ${lastFetchDate.toISOString()}`);
                      }
                  } catch (parseError) {
                      console.warn(`Could not parse existing releases.json (${parseError.message}), starting fresh.`);
                      existingReleases = [];
                  }
              } else {
                  console.log("No existing releases.json found. Fetching all releases.");
              }

              try {
                const newReleases = await fetchAllReleases(repoApiUrl, 1, [], lastFetchDate);
                console.log(`Fetched ${newReleases.length} new release(s).`);

                if (newReleases.length === 0) {
                    console.log("No new releases found. The file is already up to date.");
                    return;
                }

                const allReleasesMap = new Map();
                newReleases.forEach(release => allReleasesMap.set(release.id, release));
                existingReleases.forEach(release => allReleasesMap.set(release.id, release));

                let combinedReleases = Array.from(allReleasesMap.values());
                console.log(`Total releases after merging: ${combinedReleases.length}.`);

                combinedReleases.sort((a, b) => new Date(b.published_at) - new Date(a.published_at));

                if (!fs.existsSync("assets/data")) {
                    fs.mkdirSync("assets/data", { recursive: true });
                }
                fs.writeFileSync(filePath, JSON.stringify(combinedReleases, null, 2));
                console.log("Successfully updated and saved releases.json with all new and existing releases.");
              } catch (error) {
                console.error("Failed to fetch or save releases:", error.message);
                process.exit(1);
              }
            }
            main();
          '

      - name: Commit and push if changes
        run: |
          git config user.name "Andrew"
          git config user.email "andrewleduc88@yahoo.com"
          git add assets/data/releases.json
          git diff --cached --exit-code assets/data/releases.json || git commit -m "automated: Update firmware release data"
          git push
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
